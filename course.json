{
  "course": {
    "department": "Communication Design",
    "slug": "F10-ART-326H",
    "section": "01",
    "context": "Special Topics: Interaction Design",
    "semester": "Spring 2020",
    "name": "Layout Systems",
    "meetingTimes": [
      {
        "days": "Tues/Thurs",
        "time": "6:00pmâ€“8:50pm",
        "location": "Steinberg 213",
        "purpose": "Class"
      }
    ],
    "instructors": [
      {
        "slug": "asiemsen",
        "lastName": "Siemsen",
        "firstName": "Abram",
        "basePath": "https://abesiemsen.github.io/layout2020spring/",
        "email": "asiemsen@wustl.edu",
        "phone": "314-323-0911"
      }
    ],
    "syllabus": "syllabus.snippet",
    "students": [

      {
        "slug": "Bersabeh",
        "lastName": "Zenebe",
        "firstName": "Bersabeh",
        "status": "waitlist",
        "basePath": "https://bzenebe.github.io/layout2020spring/"
      },
      {
        "slug": "BrandonWilburn",
        "lastName": "Wilburn",
        "firstName": "Brandon",
        "status": "enrolled",
        "basePath": "https://brandon-wilburn.github.io/layout2020spring/"
      },
      {
        "slug": "GiorgioGuttilla",
        "lastName": "Guttilla",
        "firstName": "Giorgio",
        "status": "waitlist",
        "basePath": "https://giorgioguttilla.github.io/layout2020spring/"
      },
      {
        "slug": "JeffersonDuan",
        "lastName": "Duan",
        "firstName": "Jefferson",
        "status": "enrolled",
        "basePath": "https://jduan26.github.io/layout2020spring/"
      },
      {
        "slug": "JeffSu",
        "lastName": "Su",
        "firstName": "Jeff",
        "status": "waitlist",
        "basePath": "https://suyjeff.github.io/layout2020spring/"
      },
      {
        "slug": "KimberlyClark",
        "lastName": "Clark",
        "firstName": "Kimberly",
        "status": "waitlist",
        "basePath": "https://kimberly-clark.github.io/layout2020spring/"
      },
      {
        "slug": "MarissaKalkar",
        "lastName": "Kalkar",
        "firstName": "Marissa",
        "status": "waitlist",
        "basePath": "https://mkalkar.github.io/layout2020spring/"
      },
      {
        "slug": "MilesLee",
        "lastName": "Lee",
        "firstName": "Miles",
        "status": "enrolled",
        "basePath": "https://bleehaus.github.io/layout2020spring/"
      },
      {
        "slug": "TrevorMcKee",
        "lastName": "McKee",
        "firstName": "Trevor",
        "status": "enrolled",
        "basePath": "https://trevorjmckee.github.io/layout2020spring/"
      }
    ],
    "dropped": [
      {
        "slug": "AmieDeng",
        "lastName": "Deng",
        "firstName": "Amie",
        "status": "enrolled",
        "basePath": "https://adeng9800.github.io/layout2020spring/"
      },
      {
        "slug": "ChristinaPan",
        "lastName": "Pan",
        "firstName": "Christina",
        "status": "enrolled",
        "basePath": "https://christinapan98.github.io/layout2020spring/"
      },
      {
        "slug": "DongyoonLee",
        "lastName": "Lee",
        "firstName": "Dongyoon",
        "status": "enrolled",
        "basePath": "https://ldongy98.github.io/layout2020spring/"
      },
      {
        "slug": "MinLee",
        "lastName": "Lee",
        "firstName": "Min",
        "status": "enrolled",
        "basePath": "https://smilemin030.github.io/layout2020spring/"
      },
      {
        "slug": "PTKKyaw",
        "lastName": "Kyaw",
        "firstName": "PTK",
        "status": "waitlist",
        "basePath": "https://NEED-YOUR-NAME.github.io/layout2020spring/"
      },
      {
        "slug": "SarahRhee",
        "lastName": "Rhee",
        "firstName": "Sarah",
        "status": "waitlist",
        "basePath": "https://sarahrheerhee.github.io/layout2020spring/"
      }
    ],
    "sessions": [
      {
        "number": 1,
        "date": "2020-01-14 06:00"
      },
      {
        "number": 2,
        "date": "2020-01-16 06:00"
      },
      {
        "number": 3,
        "date": "2020-01-21 06:00"
      },
      {
        "number": 4,
        "date": "2020-01-23 06:00"
      },
      {
        "number": 5,
        "date": "2020-01-28 06:00"
      },
      {
        "number": 6,
        "date": "2020-01-30 06:00"
      },
      {
        "number": 7,
        "date": "2020-02-04 06:00"
      },
      {
        "number": 8,
        "date": "2020-02-06 06:00"
      },
      {
        "number": 9,
        "date": "2020-02-11 06:00"
      },
      {
        "number": 10,
        "date": "2020-02-13 06:00"
      },
      {
        "number": 11,
        "date": "2020-02-18 06:00"
      },
      {
        "number": 12,
        "date": "2020-02-20 06:00"
      },
      {
        "number": 13,
        "date": "2020-02-25 06:00"
      },
      {
        "number": 14,
        "date": "2020-02-27 06:00"
      },
      {
        "number": 15,
        "date": "2020-03-03 06:00"
      },
      {
        "number": 16,
        "date": "2020-03-05 06:00"
      },
      {
        "date": "2020-03-10 06:00",
        "holiday": "Spring Break"
      },
      {
        "date": "2020-03-12 06:00",
        "holiday": "Spring Break"
      },
      {
        "number": 17,
        "date": "2020-03-17 06:00"
      },
      {
        "number": 18,
        "date": "2020-03-19 06:00"
      },
      {
        "number": 19,
        "date": "2020-03-24 06:00"
      },
      {
        "number": 20,
        "date": "2020-03-26 06:00"
      },
      {
        "number": 21,
        "date": "2020-03-31 06:00"
      },
      {
        "number": 22,
        "date": "2020-04-02 06:00"
      },
      {
        "number": 23,
        "date": "2020-04-07 06:00"
      },
      {
        "number": 24,
        "date": "2020-04-09 06:00"
      },
      {
        "number": 25,
        "date": "2020-04-14 06:00"
      },
      {
        "number": 26,
        "date": "2020-04-16 06:00"
      },
      {
        "number": 27,
        "date": "2020-04-21 06:00"
      },
      {
        "number": 28,
        "date": "2020-04-23 06:00"
      }
    ],
    "projects": [
      {
        "slug": "getting-started",
        "name": "Getting Started",
        "hidden": false,
        "start": "2020-01-14",
        "end": "2020-01-14",
        "description": "<p>Get squared away with tools and resources.</p>",
        "deliverables": [
          {
            "slug": "local-directory",
            "name": "Local Directory",
            "hidden": false,
            "assigned": "2020-01-14",
            "due": "2020-01-14",
            "instructions": "<p>Create a local directory called <code>layout2020spring</code> in your documents directory. Inside this directory, create two sub-directories: <code>resources</code> and <code>publish</code>.</p><p><p>Each of these folders will eventually be further subdivided by project, and projects by deliverables. The specific project and deliverable folder name to use will be provided as part of each assignment.</p><em>Resources</em> is where you'll keep non-published files, such as photoshop or illustratir docs, notes, unprocessed images, etc. <em>Publish</em> will ONLY contain those files that will get uploaded to github as deliverables. Think of your github repository as a perfect reflection of your local <em>Publish</em> directory.</p>"
          },
          {
            "slug": "slack",
            "name": "Slack",
            "hidden": false,
            "assigned": "2020-01-14",
            "due": "2020-01-14",
            "instructions": "Join the class Slack workspace by clicking invitation link below.",
            "references": [
              {
                "name": "Invitation",
                "description": "Click to join.",
                "link": "https://join.slack.com/t/layout2020spring/shared_invite/enQtOTAyNzgxNzY0Mjc2LTJjNmNkMGRkZDMwOTliNGJkN2ZkY2RjNGM1MDZjNmEwYmUyNGMzYmEzNWQ1Y2M2YTY4NzQ4OWU5ODk1ZjE3ZGU"
              }
            ]
          },
          {
            "slug": "github-account",
            "name": "Github Account",
            "hidden": false,
            "assigned": "2020-01-14",
            "due": "2020-01-14",
            "instructions": "<ul><li>Create a GitHub account (or use your existing one).</li><li>Slack me your GitHub url. It will look like: <code>https://github.com/abesiemsen</code>.</li></ul>",
            "references": [
              {
                "name": "github.com",
                "description": "Create account or login.",
                "link": "https://github.com"
              }
            ]
          },
          {
            "slug": "github-repo",
            "name": "Github Repository",
            "hidden": false,
            "assigned": "2020-01-14",
            "due": "2020-01-14",
            "instructions": "<ul><li>Create a GitHub repository for this class. Name it: <code>layout2020spring</code>. Make it public, and check the box for <em>Initialize this repository with a README</em>.</li><li>Go to <em>settings</em>, scroll down to <em>GitHub Pages</em>, and select <em>master branch</em> from the <em>source</em> dropdown. This will make your uploaded work publicly accessible, so the class-website can find it.</li></ul>",
            "references": [
              {
                "name": "github.com/new",
                "description": "Create a 'layout2020spring' repository.",
                "link": "https://github.com/new"
              }
            ]
          }
        ]
      },

      {
        "slug": "news-story-template",
        "name": "News Story Template",
        "hidden": false,
        "start": "2020-01-14",
        "end": "2020-02-06",
        "description": "<p>You will create a template to display news stories. The stories themselves will be dynamic content &mdash; you will not have direct control over their content. However, you will design, style, and build the template used to display them.</p><p>This template will be responsive (work visually at any device or browser width).</p><p>The template must accomodate:</p><ul><li>Title</li><li>Subtitle</li><li>Teaser text</li><li>Publish date</li><li>Tags</li><li>Primary image w/caption</li><li>Source name and url</li><li>Body copy</li><li>Embedded content: title tags, lists, images and figures with captions, pull-quotes</li><li>Related story links w/ title, subtitle, teaser, image</li></ul><h3>Learning Objectives</h3><ul><li>Manage single-column responsive content</li><li>Learn about and build templates for dynamic data</li><li>Gain experience with a templating syntax</li><li>Define style systems, not one-off instructions</li><li>Refine aesthetic decision-making for screens</li><li>Design in the browser</li></ul>",
        "deliverables": [
          {
            "slug": "starter-file",
            "name": "Starter File",
            "hidden": false,
            "assigned": "2020-01-14",
            "due": "2020-01-14",
            "file": "index.html",
            "description": "<p>To get going, you'll need this starter file.</p>",
            "instructions": "<p>Right-click on <code>starter.html</code>, and choose <code>Save link as...</code>. Save it as <code>index.html</code>, in your <code>publish</code> folder, and the path shown below.</p><p>Upload to github once it's working locally.</p>",
            "references": [
              {
                "name": "starter.html",
                "link": "projects/news-story-template/starter.html",
                "description": "This is the starting point for your own template."
              }
            ]
          },
          {
            "slug": "primary-text-layout",
            "name": "Primary Text Layout",
            "hidden": false,
            "assigned": "2020-01-14",
            "due": "2020-01-16",
            "file": "index.html",
            "references": [
              {
                "name": "Vue.js",
                "link": "https://vuejs.org/v2/guide/syntax.html",
                "description": "A reference for the Vue template syntax."
              }
            ],
            "description": "<p>We'll take an iterative approach to design, and we'll design in the browser. We'll start by focusing on primary text content only: Title, Subtitle, Date, Teaser, Content. Stylistically, your primary objective is to select and apply typeface(s), and make basic text layout choices: sizes, whitespace management, line-length, margin/padding, etc.</p>",
            "instructions": "<p>Add structure and CSS to apply your style choices. Consider uploading more than one version, using <code>deliverable.json</code>.</p>"
          },
          {
            "slug": "flex-experiment",
            "name": "Flex Experiment",
            "hidden": false,
            "assigned": "2020-01-14",
            "due": "2020-01-21",
            "file": "index.html",
            "references": [
              {
                "name": "A Complete Guide to Flexbox",
                "url": "https://css-tricks.com/snippets/css/a-guide-to-flexbox/",
                "description": "The reference Abe likes for explaining all the different ways flex layout can help you arrange things."
              }
            ],
            "description": "<p>Continue to refine your news-story layout, both in style and structure, using some/all of the principles we discussed in class. Also, find a place or places in your layout where flex-box is an appropriate solution to try, and experiment with using flex-based layout rules.</p>",
            "instructions": "<p>When you feel comfortable with using flex-box as a layout tool, upload what you have!</p>"
          },
          {
            "slug": "component-layout",
            "name": "Component Layout",
            "hidden": false,
            "assigned": "2020-01-21",
            "due": "2020-01-23",
            "file": "index.html",
            "references": [],
            "description": "<p>Following the 'component/safe-area' pattern is a useful way to approach common layout challenges in a vertically-stacked page, and provides a good framework for style rules that operate as a system, instead of simply matching styles with page elements 1:1. What are the logical components of the page? Which components should follow your 'default' rules, and which should have exceptions?</p><p>In addition to the specific requirements noted below, make design choices about that rest of the page content that continue to explore options (font, color, size, etc), and that accomodate and complement the large header image.</p>",
            "instructions": "<p>Create a version of your layout that uses the component/safe-area pattern as a macro-scale solution for page layout. Create an edge-to-edge banner with the story image, and make/apply design decisions as necessary to make the banner 'make sense' at all device-widths.</p>"
          },
          {
            "slug": "design-iterations",
            "name": "Design Iterations",
            "hidden": false,
            "assigned": "2020-01-23",
            "due": "2020-01-28",
            "file": "index.html",
            "references": [],
            "description": "<p>Based on the feedback/discussion you had with me in class, create at least three different versions of your news-template, aimed at different communication objectives. One might aim to be the most main-stream, conventional, middle of the road presentation it can be. One might be the one that aims to be bold, in your face, attention-grabbing. One might be inviting, friendly, accessible. One might be aimed at really treating the image as the hero content. One might be aimed at really activating margin-space in order to 'break out of the single column feel at larger sizes.</p><p>Whatever targets you pick, use them to guide your design decisions. &ldquo;Is this typeface really agressive enough? How big can it go and still work?&rdquo;</p><p>Consider, these iterations don't necessarily require big structural changes in your html. You may find that you just need to change css. In fact, <em>only</em> having to change css would be a very good indication that you've structured your html in a very semantic way, in which it describes the content, not the design, and is therefore useful for <em>any</em> design.</p>",
            "instructions": "<p>Use <code>deliverable.json</code> to upload at least three versions of your news-template design.</p>"
          },
          {
            "slug": "related-story-iterations",
            "name": "Related Story Iterations",
            "hidden": false,
            "assigned": "2020-01-28",
            "due": "2020-01-30",
            "file": "index.html",
            "references": [],
            "description": "<p>In class, we walked through how to use flex layout to manage grid items responsively in the macro layout, and also experimented with using flex to handle micro-layout issues. We also used a flew sneaky tricks to handle common layout headaches. We negative margin on the flex container to 'make room' for interior gutter margins. We used the 'padding-bottom' trick (along with absolute positioning) to create a fixed-aspect-ratio container for the purpose of conforming all images to a consistent size/shape. We set <code>img</code> tags to be <code>display: block;</code> in order to get rid of the phantom space beneath.</p><p>Now, it's time to put some of these techniques to work in your own layouts! Create three versions of the 'related-stories' block, where all of the various 'elbows' are safely tucked-in, and the page feels like a fully-controlled flexible system.</p>",
            "instructions": "<p>Use <code>deliverable.json</code> to upload at least three different visual/technical approaches to the related story items. They can be isolated experiments, or more integrated with your existing overall templates, as you see fit.</p>"
          },
          {
            "slug": "static-embellishments",
            "name": "Static Embellishments",
            "hidden": false,
            "assigned": "2020-01-30",
            "due": "2020-02-04",
            "file": "index.html",
            "references": [],
            "description": "<p><em>What is missing that prevents this template from being portfolio-ready?</em></p>",
            "instructions": "<p>Take the results of your experiments and iterations, pick a visual direction that's the right one to follow, make a version of the layout that has zero broken or unfinished technical components, and which introduces static elements for any aspects of the story you feel are not represented. (e.g.: Author details, social media links, in-story content like pull-quotes, etc.)</p><p>Recognizing that we'll approach masthead/navigation/footer next week, stay focused on story-specific elements for now.</p>"
          },
          {
            "slug": "finished-story-layout",
            "name": "Finished Story Layout",
            "hidden": false,
            "assigned": "2020-02-04",
            "due": "2020-02-06",
            "file": "index.html",
            "references": [],
            "description": "<p>Time to finalize decisions, at least as much as we can without masthead / navigation / footer.</p><p><strong>NOTE: I've added two new access options to our data. You can now get an array called <code>storiesWithSameTag</code>. You can also a get subset of top stories using <code>topStories(n)</code> where <code>n</code> is the number of stories you want.</strong></p>",
            "instructions": "<p>Revise per your discussion with me in class, and post your final pre-masthead story template.</p>"
          },
          {
            "slug": "news-site-branding",
            "name": "News Site Branding",
            "hidden": false,
            "assigned": "2020-02-06",
            "due": "2020-02-11",
            "file": "index.html",
            "references": [],
            "description": "<p>Create a brand for your news site. Name it, give it a tag line, develop a simple color palette, and ultimately create something along the lines of a styled 'masthead' to use on the site. Don't bother with a logomark. Instead, use the name of the site as the visual 'signature', and design that. Use whatever design tools you prefer to explore ideas. Upload a page that shows me where you've landed, but also document your ideas, iterations, concepts, etc. <em>The deliverable will not be an iteration of the existing news site, it will just be a page with branding concepts, and your selected final direction.</em> I'll expect you to refine the brand as we move into future aspects of the project, but don't expect dedicated time for it &mdash; this week is your one chance to focus entirely on this aspect of the project!</p>",
            "instructions": "<p>Don't worry about rendering the brand in HTML/CSS yet, if you prefer not to. You may deliver an HTML page with embedded images exported from other tools, photos of drawings, whatever, but understand that ultimately the finished design it will end up being part of an HTML page, so consider ramifications of font-choices, etc.</p>"
          }
        ]
      },


      {
        "slug": "news-site-header",
        "name": "News Site Header",
        "hidden": false,
        "start": "2020-02-11",
        "end": "2020-02-27",
        "description": "<p>Our news site needs a header. Building a responsive site header, with all it's component parts and pieces, tends to be a fairly challenging endeavor. In order to present yourself with a typical set of challenges, your site header should mee the following requirements:</p><ul><li>It should include three major elements:<ul><li>Branding / Masthead</li><li>Primary Navigation</li><li>Account / Sign-up navigation</li></ul></li><li>Masthead should include site name or brand. It should probably include a tagline.</li><li>Primary navigation options should be two levels deep<ul><li>At least 2 top-level items have sub-categories</li><li>Roughly 20 total individual navigation options (top and sub combined)</li></ul></li><li>It should be responsive (work visually at any screen-width).<ul><li>At mobile sizes, primary nav should be hidden behind hamburger menu button or similar</li><li>At desktop sizes, top-level primary nav is NOT hidden. Sub-items probably remain hidden, using flyout navigation or similar.</li></ul></li><li>Account / sign up navigation should consider (at least) two states: not logged in, and logged in.</li><li>Other requirements:<ul><li>It should use real names for things (no obvious repetition or placeholders)</li><li>It should present appropriate categories/sub-categories for primary nav, given the purpose of the site.</li></ul></li></ul>",
        "deliverables": [
          {
            "slug": "mobile-nav-layout",
            "name": "Mobile Nav Layout",
            "hidden": false,
            "assigned": "2020-02-11",
            "due": "2020-02-13",
            "file": "index.html",
            "description": "<p>We'll start by designing and building the simplest component of the layout: The primary mobile navigation.</p>",
            "instructions": "<p>Make decisions about the categorization of your primary navigation options, based on appropriate research. Design how those navigation options will present themselves visually <strong>at mobile size</strong>, either as a high-fidelity mockup, or using HTML/CSS.</p><p><strong>DO:</strong></p><ul><li>Consider your fat-fingered users, and what they need to accomplish.</li><li>Manage hierarchy of top-level vs secondary-level options.</li><li>Demonstrate how the 'open' navigation menu will handle the bottom of the screen.</li></ul><p><strong>DO NOT:</strong></p><ul><li>Worry about desktop layout.</li><li>Worry about programming click/touch interactions. You can just show us the 'open' state, as if a user had already opened/expanded whatever options they can.</li></ul>"
          },
          {
            "slug": "mobile-site-header",
            "name": "Mobile Site Header",
            "hidden": false,
            "assigned": "2020-02-13",
            "due": "2020-02-018",
            "file": "index.html",
            "description": "<p>Design and build the site header for mobile (menu collapsed).</p>",
            "instructions": "<p>This deliverable includes the HTML/CSS required for the site header (mobile only), before any user interaction takes place. It should include masthead/branding, the button/control users will use to toggle the main nav menu, and possibly the account nav (depending on your design).</p>"
          },
          {
            "slug": "enabled-mobile-nav",
            "name": "Enabled Mobile Nav",
            "hidden": false,
            "assigned": "2020-02-13",
            "due": "2020-02-20",
            "file": "index.html",
            "description": "<p>Make your mobile menu open and close. Decide what the user control(s) look like, where they go, and how they operate, then implement your plan.</p>",
            "instructions": "<p>Use the code provided in the link below as a starting point, or use your own strategy. It's up to you.</p>",
            "references": [
              {
                "name": "starter.html",
                "link": "projects/news-story-template/starter.html",
                "description": "I've added some menu-toggling code to the starter file."
              }
            ]
          },
          {
            "slug": "full-site-header",
            "name": "Full Site Header",
            "hidden": false,
            "assigned": "2020-02-20",
            "due": "2020-02-25",
            "file": "index.html",
            "description": "<p>Our next step is to design and build the site header for full-screen sizes. This includes:</p><ul><li>Determining placement of branding, primary navigation and account-navigation elements</li><li>Successfully transitioning between the existing mobile layout and the new desktop layout using media-queries and/or other responsive design techniques</li><li>Handling functionality of the drop-down behavior for submenu options (as needed for your layout).</li></ul>",
            "instructions": "<p>Make the necessary updates, and post as usual.</p>",
            "references": []
          },
          {
            "slug": "header-and-story-together",
            "name": "Header and Story Together",
            "hidden": false,
            "assigned": "2020-02-25",
            "due": "2020-02-27",
            "file": "index.html",
            "description": "<p>Once your header design is complete and displaying correctly at all sizes with all required components, it's time to combine it with actual page content.</p>",
            "instructions": "<p>Complete whatever is unfinished, and integrate header with story template.</p>",
            "references": []
          },
          {
            "slug": "deliverable-slug-goes-here",
            "name": "Deliverable Name Goes Here",
            "hidden": true,
            "assigned": "2020-01-01",
            "due": "2020-02-01",
            "file": "index.html",
            "description": "Deliverable description html goes here.",
            "instructions": "Deliverable instructions html goes here.",
            "references": [
              {
                "name": "Reference Name Goes Here",
                "link": "reference/url/goes/here",
                "description": "Describe the reference here."
              }
            ],
            "examples": [
              {
                "name": "Example Name Goes Here",
                "link": "example/url/goes/here"
              }
            ]
          }
        ]
      },


      {
        "slug": "project-slug-goes-here",
        "name": "Project Name Goes Here",
        "hidden": true,
        "start": "2020-01-01",
        "end": "2020-01-01",
        "description": "Project description html goes here.",
        "references": [
          {
            "name": "Sample deliverable.json",
            "link": "reference/url/goes/here",
            "description": "Describe the reference here."
          }
        ],
        "examples": [
          {
            "name": "Sample deliverable.json",
            "link": "link/goes/here"
          }
        ],
        "deliverables": [
          {
            "slug": "deliverable-slug-goes-here",
            "name": "Deliverable Name Goes Here",
            "hidden": true,
            "assigned": "2020-01-01",
            "due": "2020-02-01",
            "file": "index.html",
            "description": "Deliverable description html goes here.",
            "instructions": "Deliverable instructions html goes here.",
            "references": [
              {
                "name": "Reference Name Goes Here",
                "link": "reference/url/goes/here",
                "description": "Describe the reference here."
              }
            ],
            "examples": [
              {
                "name": "Example Name Goes Here",
                "link": "example/url/goes/here"
              }
            ]
          }
        ]
      }



    ]
  }
}
